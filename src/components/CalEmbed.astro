---
export interface Props {
  calLink: string
  namespace?: string
  config?: Record<string, any>
  uiConfig?: Record<string, any>
  elementId?: string
}

const {
  calLink,
  namespace = 'pandionlabs',
  config = { layout: 'month_view' },
  uiConfig = {
    cssVarsPerTheme: {
      light: { 'cal-brand': '#01b77e' },
      dark: { 'cal-brand': '#b77e01' },
    },
    hideEventTypeDetails: false,
    layout: 'month_view',
  },
  elementId = 'my-cal-inline',
} = Astro.props
---

<div
  id={elementId}
  class="cal-widget-container"
  style="width:100%;height:100%;overflow:scroll;min-height:600px;"
  data-cal-link={calLink}
  data-cal-namespace={namespace}
  data-cal-config={JSON.stringify(config)}
  data-cal-ui-config={JSON.stringify(uiConfig)}
>
  <div class="cal-loading-placeholder flex items-center justify-center">
    <div class="button">Schedule an appointment</div>
  </div>
</div>

<script>
  class LazyCalWidget {
    constructor() {
      this.observer = null
      this.isLoaded = false
      this.init()
    }

    init() {
      // Set up intersection observer
      this.observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting && !this.isLoaded) {
              this.loadCalWidget(entry.target)
            }
          })
        },
        {
          rootMargin: '50px', // Start loading 50px before element is visible
        },
      )

      // Observe all cal widget containers
      document.querySelectorAll('.cal-widget-container').forEach((element) => {
        this.observer.observe(element)
      })
    }

    async loadCalWidget(element) {
      this.isLoaded = true
      this.observer.unobserve(element)

      // Get configuration from data attributes
      const calLink = element.dataset.calLink
      const namespace = element.dataset.calNamespace
      const config = JSON.parse(element.dataset.calConfig)
      const uiConfig = JSON.parse(element.dataset.calUiConfig)

      // Remove loading placeholder
      const placeholder = element.querySelector('.cal-loading-placeholder')
      if (placeholder) {
        placeholder.remove()
      }

      // Initialize Cal.com widget
      this.initializeCalWidget(element, calLink, namespace, config, uiConfig)
    }

    initializeCalWidget(element, calLink, namespace, config, uiConfig) {
      // Cal.com initialization script
      ;(function (C, A, L) {
        let p = function (a, ar) {
          a.q.push(ar)
        }
        let d = C.document
        C.Cal =
          C.Cal ||
          function () {
            let cal = C.Cal
            let ar = arguments
            if (!cal.loaded) {
              cal.ns = {}
              cal.q = cal.q || []
              d.head.appendChild(d.createElement('script')).src = A
              cal.loaded = true
            }
            if (ar[0] === L) {
              const api = function () {
                p(api, arguments)
              }
              const namespace = ar[1]
              api.q = api.q || []
              if (typeof namespace === 'string') {
                cal.ns[namespace] = cal.ns[namespace] || api
                p(cal.ns[namespace], ar)
                p(cal, ['initNamespace', namespace])
              } else p(cal, ar)
              return
            }
            p(cal, ar)
          }
      })(window, 'https://app.cal.com/embed/embed.js', 'init')

      // Initialize Cal with the provided configuration
      window.Cal('init', namespace, { origin: 'https://cal.com' })

      window.Cal.ns[namespace]('inline', {
        elementOrSelector: `#${element.id}`,
        config: config,
        calLink: calLink,
      })

      window.Cal.ns[namespace]('ui', uiConfig)
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new LazyCalWidget()
    })
  } else {
    new LazyCalWidget()
  }
</script>

<style>
  .cal-loading-placeholder {
    border-radius: 8px;
    min-height: 300px;
  }
</style>

---
import { Icon } from 'astro-icon/components'

/**
 * Feature Component
 *
 * @description A component that displays a feature with an icon, title, and description
 */
interface Props {
  /**
   * The icon to display
   */
  icon: string
  /**
   * The title to display
   */
  title: string
  /* Direction: Icon above or on same line of the text */
  direction?: 'horizontal' | 'vertical'
  /**
   * Optional URL to make the feature clickable
   */
  linkTo?: string
}

const { icon = 'mdi:rocket', title = 'Title', direction = 'vertical', linkTo: url }: Props = Astro.props
const flexDirection = direction === 'vertical' ? 'flex-col' : 'flex-row'
---

{
  url ? (
    <a href={url} class={`feature flex gap-4 ${flexDirection}`}>
      <Icon name={icon} />
      <div class="content">
        <h3 class="text-2xl font-bold">{title}</h3>
        <p>
          <slot>Lorem ipsum dolor sit amet consectetur adipisicing elit. Hic, corporis.</slot>
        </p>
      </div>
    </a>
  ) : (
    <div class={`feature flex gap-4 ${flexDirection}`}>
      <Icon name={icon} />
      <div class="content">
        <h3 class="text-2xl font-bold">{title}</h3>
        <p>
          <slot>Lorem ipsum dolor sit amet consectetur adipisicing elit. Hic, corporis.</slot>
        </p>
      </div>
    </div>
  )
}

<style lang="scss">
  @use '../assets/scss/base/breakpoint' as *;

  .feature {
    display: flex;
    position: relative;
    padding: var(--space-l);
    inline-size: calc(100% - var(--space-l));
    color: inherit;
    text-decoration: none;

    > * {
      position: relative;
      z-index: 2;
    }

    @include breakpoint(xl) {
      inline-size: 100%;
    }

    &::before,
    &::after {
      position: absolute;
      content: '';
    }

    &::before {
      z-index: 1;
      transition: border-width 0.2s ease;
      inset: 0;
      box-shadow: 0 0 0 6px var(--color-neutral-100);
      border: 3px solid var(--color-neutral-700);
      border-radius: var(--radius-l);
      background-color: var(--color-neutral-100);
    }

    &::after {
      z-index: 0;
      inset: var(--space-m) -0.85rem -0.85rem 1rem;
      border-radius: var(--radius-l);
      background-color: var(--link-color);
    }

    &:hover {
      cursor: pointer;

      &::before {
        border-width: 6px;
      }
    }
  }

  :global(.feature [data-icon]) {
    inline-size: 4rem;
    block-size: auto;
    color: var(--link-color);
  }

  :global(.darkmode .feature::before) {
    box-shadow: 0 0 0 6px var(--color-neutral-900);
    background-color: var(--color-neutral-900);
  }
</style>
